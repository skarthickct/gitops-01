name: Build Step

on:
  push:
    branches: ['master']

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.20.0]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Debugging node/npm versions
      - run: node -v
      - run: npm -v

      # Clean npm cache before install
      - run: npm cache clean --force

      # Install dependencies using npm install
      - name: Install Dependencies
        run: npm install --verbose

      - name: Build Project
        run: npm run build --if-present

      - name: Cache node_modules and npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Set Nexus npm registry
        run: |
          echo "registry=${{ secrets.NPM_REGISTRY }}" > .npmrc
          echo "//${{ secrets.NPM_REGISTRY#*// }}:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc


  test-stage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code for Tests
        uses: actions/checkout@v3
      - name: Run Tests
        run: |
          echo "Running tests"

  build-and-push-docker-image:
    name: Build Docker Image and Push to Repositories
    runs-on: ubuntu-latest
    needs: [build, test-stage]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: GitHub Container Registry Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          tags: |
            karthickct/gitops-01:${{ github.sha }} 
            ghcr.io/skarthickct/gitops-01:${{ github.sha }}
          push: ${{ github.ref == 'refs/heads/master' }}
          cache-from: type=registry,ref=ghcr.io/skarthickct/gitops-01:latest

      - name: Output Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  update-manifest-stage:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker-image]
    steps:
      - uses: actions/checkout@v3
        with:
          repository: skarthickct/gitops-infra
          ref: 'master'
          token: ${{ secrets.G_TOKEN }}
      - name: Setup git config
        run: |
          git config --global user.email "karthick@cloudthat.com"
          git config --global user.name "skarthickct"
          echo ${{ github.sha }}
      - name: Check current deployment.yaml contents
        run: cat deployment.yaml
      - name: Update Image in Deployment YAML
        run: |
          sed -i "s#skarthickct.*#skarthickct/gitops-01:${{ github.sha }}#g" deployment.yaml
      - name: Check for Changes in deployment.yaml
        id: check_changes
        run: |
          git diff --exit-code || echo "Changes detected"
      - name: Commit and Push Changes if Any
        if: steps.check_changes.outputs.exit_code != '0'
        run: |
          git add -A
          git commit -m "Update image for - ${{ github.sha }}"
          git push origin master
